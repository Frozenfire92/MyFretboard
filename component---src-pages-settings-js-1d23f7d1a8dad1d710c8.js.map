{"version":3,"sources":["webpack:///./src/components/input/Button.js","webpack:///./src/components/input/Checkbox.js","webpack:///./src/components/input/Color.js","webpack:///./src/components/input/Number.js","webpack:///./src/pages/settings.js","webpack:///./src/components/ChordDiagram.js","webpack:///./src/components/input/Select.js"],"names":["Color","handleClick","this","props","onClick","render","_this","react_default","a","createElement","label","Component","propTypes","PropTypes","string","func","Checkbox","handleChange","event","onChange","target","checked","type","value","e","bool","min","max","step","any","number","SettingsPage","App","path","_ref","settings","updateSetting","resetSettings","data","state","className","Select","hand","options","input_Color","stringColor","fretColor","fingerColor","fingerBorderColor","fingerTextColor","input_Checkbox","showFretMarkers","fretMarkerBorderColor","fretMarkerColor","input_Number","fretMarkerOpacity","showFingerNumberLabel","Button","FretBoard","chord","chords","find","n","id","ChordDiagram","isVertical","chordDiagramOrientation","width","react__WEBPACK_IMPORTED_MODULE_1___default","_FretBoard__WEBPACK_IMPORTED_MODULE_3__","isChordDiagram","fretCount","startAtBarOrMin","displayLabelInBar","showFretBarLabel","displayLabelAtFret","object","defaultProps","map","key","arrayOf","shape"],"mappings":"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","file":"component---src-pages-settings-js-1d23f7d1a8dad1d710c8.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nclass Color extends Component {\n  static propTypes = {\n    label: PropTypes.string,\n    onClick: PropTypes.func\n  }\n\n  handleClick() {\n    if (this.props.onClick) this.props.onClick();\n  }\n\n  render() {\n    return (\n      <button onClick={() => { this.handleClick(); }}>{this.props.label}</button>\n    );\n  }\n}\n\nexport default Color;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nclass Checkbox extends Component {\n  static propTypes = {\n    value: PropTypes.bool,\n    label: PropTypes.string,\n    onChange: PropTypes.func\n  }\n\n  handleChange(event) {\n    if (this.props.onChange) this.props.onChange(event.target.checked);\n  }\n\n  render() {\n    return (\n      <label>\n        <input type=\"checkbox\" checked={this.props.value} onChange={(e) => { this.handleChange(e); }} />\n        &nbsp;{this.props.label}\n      </label>\n    );\n  }\n}\n\nexport default Checkbox;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nclass Color extends Component {\n  static propTypes = {\n    value: PropTypes.string,\n    label: PropTypes.string,\n    onChange: PropTypes.func\n  }\n\n  handleChange(event) {\n    if (this.props.onChange) this.props.onChange(event.target.value);\n  }\n\n  render() {\n    return (\n      <label>\n        <input type=\"color\" value={this.props.value} onChange={(e) => { this.handleChange(e); }} />\n        &nbsp;{this.props.label}\n      </label>\n    );\n  }\n}\n\nexport default Color;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nclass Color extends Component {\n  static propTypes = {\n    value: PropTypes.any,\n    label: PropTypes.string,\n    step: PropTypes.number,\n    min: PropTypes.number,\n    max: PropTypes.number,\n    onChange: PropTypes.func\n  }\n\n  handleChange(event) {\n    let value = event.target.value;\n    if (this.props.min && value < this.props.min) value = this.props.min;\n    if (this.props.max && value > this.props.max) value = this.props.max;\n    if (this.props.onChange) this.props.onChange(value);\n  }\n\n  render() {\n    return (\n      <label>\n        <input\n          type=\"number\"\n          step={this.props.step}\n          min={this.props.min}\n          max={this.props.max}\n          value={this.props.value}\n          onChange={(e) => { this.handleChange(e); }}\n        />\n        &nbsp;{this.props.label}\n      </label>\n    );\n  }\n}\n\nexport default Color;\n","import React, { Component } from 'react'\nimport App, { Consumer } from '../components/App';\nimport Button from '../components/input/Button';\nimport Checkbox from '../components/input/Checkbox';\nimport Color from '../components/input/Color';\nimport Number from '../components/input/Number';\nimport Select from '../components/input/Select';\n\nimport ChordDiagram from '../components/ChordDiagram';\nimport FretBoard from '../components/FretBoard';\n\nimport '../styles/utils/flexbox.css';\nimport '../styles/pages/settings.css';\nimport '../styles/utils/card.css';\n\nexport default class SettingsPage extends Component {\n  render() {\n    return (\n      <App path={this.props[\"*\"]}>\n        <Consumer>\n          {({ settings, updateSetting, resetSettings, state, data }) => (\n            <div className=\"row\">\n              <section className=\"card\">\n                <h3>Global Settings</h3>\n                <Select\n                  label=\"Hand\"\n                  value={settings.hand}\n                  options={[{ label: 'Left', value: 'left' }, { label: 'Right', value: 'right' }]}\n                  onChange={(value) => { updateSetting('hand', value); }}\n                />\n                <Color\n                  label=\"String Color\"\n                  value={settings.stringColor}\n                  onChange={(value) => { updateSetting('stringColor', value); }}\n                />\n                <Color\n                  label=\"Fret Color\"\n                  value={settings.fretColor}\n                  onChange={(value) => { updateSetting('fretColor', value); }}\n                />\n                <Color\n                  label=\"Finger Color\"\n                  value={settings.fingerColor}\n                  onChange={(value) => { updateSetting('fingerColor', value); }}\n                />\n                <Color\n                  label=\"Finger Border Color\"\n                  value={settings.fingerBorderColor}\n                  onChange={(value) => { updateSetting('fingerBorderColor', value); }}\n                />\n                <Color\n                  label=\"Finger Text Color\"\n                  value={settings.fingerTextColor}\n                  onChange={(value) => { updateSetting('fingerTextColor', value); }}\n                />\n                <Checkbox\n                  label=\"Show Fret Marker Dots\"\n                  value={settings.showFretMarkers}\n                  onChange={(value) => { updateSetting('showFretMarkers', value); }}\n\n                />\n                <Color\n                  label=\"Fret Marker Dot Border Color\"\n                  value={settings.fretMarkerBorderColor}\n                  onChange={(value) => { updateSetting('fretMarkerBorderColor', value); }}\n                />\n                <Color\n                  label=\"Fret Marker Dot Color\"\n                  value={settings.fretMarkerColor}\n                  onChange={(value) => { updateSetting('fretMarkerColor', value); }}\n                />\n                <Number\n                  label=\"Fret Marker Dot Opacity\"\n                  value={settings.fretMarkerOpacity}\n                  min={0}\n                  max={1}\n                  step={0.05}\n                  onChange={(value) => { updateSetting('fretMarkerOpacity', value); }}\n                />\n                <Checkbox\n                  label=\"Show finger number label\"\n                  value={settings.showFingerNumberLabel}\n                  onChange={(value) => { updateSetting('showFingerNumberLabel', value); }}\n                />\n                <Button label=\"Reset All to Default\" onClick={() => { resetSettings() }} />\n              </section>\n              \n              <section className=\"card\">\n                <h3>Preview</h3>\n                <FretBoard\n                  chord={data.chords.find((n) => n.id === 'f-major')}\n                  hand={settings.hand}\n                  stringColor={settings.stringColor}\n                  fretColor={settings.fretColor}\n                  fingerColor={settings.fingerColor}\n                  fingerBorderColor={settings.fingerBorderColor}\n                  fingerTextColor={settings.fingerTextColor}\n                  fretMarkerColor={settings.fretMarkerColor}\n                  fretMarkerBorderColor={settings.fretMarkerBorderColor}\n                  fretMarkerOpacity={settings.fretMarkerOpacity}\n                  showFingerNumberLabel={settings.showFingerNumberLabel}\n                  showFretMarkers={settings.showFretMarkers}\n                />\n                <ChordDiagram \n                  chord={data.chords.find((n) => n.id === 'f-major')}\n                  hand={settings.hand}\n                  stringColor={settings.stringColor}\n                  fretColor={settings.fretColor}\n                  fingerColor={settings.fingerColor}\n                  fingerBorderColor={settings.fingerBorderColor}\n                  fingerTextColor={settings.fingerTextColor}\n                  fretMarkerColor={settings.fretMarkerColor}\n                  fretMarkerBorderColor={settings.fretMarkerBorderColor}\n                  fretMarkerOpacity={settings.fretMarkerOpacity}\n                  showFingerNumberLabel={settings.showFingerNumberLabel}\n                  showFretMarkers={settings.showFretMarkers}\n                />\n              </section>\n            </div>\n          )}\n        </Consumer>\n      </App>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport FretBoard from './FretBoard';\n\nexport default class ChordDiagram extends Component {\n  static propTypes = {\n    chord: PropTypes.object,\n    chordDiagramOrientation: PropTypes.string,\n    showFretBarLabel: PropTypes.bool\n  }\n\n  static defaultProps = {\n    chordDiagramOrientation: 'vertical',\n    showFretBarLabel: true\n  }\n\n  render() {\n    let isVertical = this.props.chordDiagramOrientation === 'vertical';\n    let width = isVertical\n      ? 350\n      : 400;\n    return (\n      <FretBoard\n        isChordDiagram={true}\n        chord={this.props.chord}\n        fretCount={6}\n        width={width}\n        isVertical={isVertical}\n        startAtBarOrMin={true}\n        displayLabelInBar={this.props.showFretBarLabel}\n        displayLabelAtFret={true}\n        hand={this.props.hand}\n        stringColor={this.props.stringColor}\n        fretColor={this.props.fretColor}\n        fingerColor={this.props.fingerColor}\n        fingerBorderColor={this.props.fingerBorderColor}\n        fingerTextColor={this.props.fingerTextColor}\n        fretMarkerColor={this.props.fretMarkerColor}\n        fretMarkerBorderColor={this.props.fretMarkerBorderColor}\n        fretMarkerOpacity={this.props.fretMarkerOpacity}\n        showFingerNumberLabel={this.props.showFingerNumberLabel}\n        showFretMarkers={this.props.showFretMarkers}\n      />\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nclass Select extends Component {\n  static propTypes = {\n    value: PropTypes.string,\n    label: PropTypes.string,\n    options: PropTypes.arrayOf(PropTypes.shape({ label: PropTypes.string, value: PropTypes.string })),\n    onChange: PropTypes.func\n  }\n\n  handleChange(event) {\n    if (this.props.onChange) this.props.onChange(event.target.value);\n  }\n\n  render() {\n    return (\n      <label>\n        <select value={this.props.value} onChange={(e) => {this.handleChange(e);}} >\n          {this.props.options.map((n) => (<option key={n.value} value={n.value}>{n.label}</option>))}\n        </select>\n        &nbsp;{this.props.label}\n      </label>\n    );\n  }\n}\n\nexport default Select;\n"],"sourceRoot":""}